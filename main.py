import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = '7730408777:AAEHH8vZcpXIAAH0n5zz6-J3Fw_TkrU7gOg'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('tasks.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    task TEXT,
    is_completed INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)
''')

# –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ–ª–±—Ü–∞ is_completed
cursor.execute('PRAGMA table_info(tasks)')
columns = [column[1] for column in cursor.fetchall()]
if 'is_completed' not in columns:
    cursor.execute('ALTER TABLE tasks ADD COLUMN is_completed INTEGER DEFAULT 0')
    conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class TaskStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_task = State()
    waiting_for_category_to_delete = State()
    waiting_for_task_to_delete = State()
    waiting_for_category_to_change = State()
    waiting_for_task_to_change_category = State()
    waiting_for_new_category = State()
    waiting_for_task_to_select = State()
    waiting_for_task_to_mark_complete = State()
    waiting_for_category_to_mark_complete = State()
    waiting_for_task_to_mark_complete = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(buttons):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=btn)] for btn in buttons],
        resize_keyboard=True
    )

async def check_state_timeout(state: FSMContext):
    data = await state.get_data()
    if 'last_activity' in data:
        last_activity = datetime.fromisoformat(data['last_activity'])
        if datetime.now() - last_activity > timedelta(minutes=5):
            await state.clear()
            return True
    return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    keyboard = create_keyboard([
        "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
        "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏",
        "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
        "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏",
        "üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
        "‚úîÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
        "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    ])
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫!\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@dp.message(lambda message: message.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
async def restart_bot(message: types.Message):
    await cmd_start(message)
    
async def get_category(message: types.Message, state: FSMContext, next_state: State):
    if await check_state_timeout(state):
        await message.answer("‚è≥ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    await state.update_data(last_activity=datetime.now().isoformat())

    user_id = message.from_user.id
    cursor.execute('SELECT DISTINCT category FROM tasks WHERE user_id = ?', (user_id,))
    categories = cursor.fetchall()
    
    if categories:
        categories_list = "\n".join([f"{i + 1}. {category[0]}" for i, category in enumerate(categories)])
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n{categories_list}")
        await state.set_state(next_state)
        await state.update_data(user_id=user_id)
    else:
        await message.answer("–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.")
        await state.clear()
        
async def get_task(message: types.Message, state: FSMContext, next_state: State):
    try:
        logger.info(f"Entered get_task with state: {await state.get_state()}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state is None:
            await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = data.get("user_id")
        if not user_id:
            logger.error("User ID not found in state")
            await state.clear()
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            category_number = int(message.text.strip()) - 1
        except ValueError:
            logger.warning("Invalid input - not a number")
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ</b> –∏–∑ —Å–ø–∏—Å–∫–∞.", parse_mode='HTML')
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute('SELECT DISTINCT category FROM tasks WHERE user_id = ?', (user_id,))
        categories = [row[0] for row in cursor.fetchall()]
        
        if not categories:
            logger.warning("No categories found")
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        if not (0 <= category_number < len(categories)):
            logger.warning(f"Invalid category number: {category_number + 1} (max {len(categories)})")
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(categories)}")
            await state.clear()
            return

        category = categories[category_number]
        logger.info(f"Selected category: {category}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute('SELECT id, task FROM tasks WHERE user_id = ? AND category = ?', (user_id, category))
        task_list = cursor.fetchall()
        
        if not task_list:
            logger.warning(f"No tasks in category: {category}")
            await message.answer(f"üì≠ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category}'</b> –∑–∞–¥–∞—á –Ω–µ—Ç.", parse_mode='HTML')
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks_list = "\n".join([f"{i + 1}. {task[1]}" for i, task in enumerate(task_list)])
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:\n{tasks_list}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            category=category,
            task_list=task_list,
            last_action=datetime.now().isoformat()
        )
        await state.set_state(next_state)
        logger.info(f"State updated to {next_state}")

    except sqlite3.Error as e:
        logger.error(f"Database error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
@dp.message(lambda message: message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–∞–±–æ—Ç–∞, –£—á—ë–±–∞, –õ–∏—á–Ω–æ–µ):")
    await state.set_state(TaskStates.waiting_for_category)
    await state.update_data(user_id=message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(TaskStates.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    user_id = (await state.get_data()).get("user_id")
    category = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT DISTINCT category FROM tasks WHERE user_id = ?', (user_id,))
    categories = [row[0] for row in cursor.fetchall()]
    
    if category in categories:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        await message.answer(f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>'{category}'</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:",
        parse_mode='HTML')
    else:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞
        await message.answer(f"üéâ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è <b>'{category}'</b>! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∑–∞–¥–∞—á—É:",
        parse_mode='HTML')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∑–∞–¥–∞—á–∏
    await state.update_data(category=category)
    await state.set_state(TaskStates.waiting_for_task)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
@dp.message(TaskStates.waiting_for_task)
async def process_task(message: types.Message, state: FSMContext):
    user_id = (await state.get_data()).get("user_id")
    data = await state.get_data()
    category = data.get("category")
    task = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT DISTINCT category FROM tasks WHERE user_id = ?', (user_id,))
    categories = [row[0] for row in cursor.fetchall()]
    
    if category not in categories:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
        await message.answer(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}'.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    cursor.execute('INSERT INTO tasks (user_id, category, task) VALUES (?, ?, ?)', (user_id, category, task))
    conn.commit()
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{category}'</b>:\n"
        f"‚ñ´Ô∏è <i>{task}</i>",
        parse_mode='HTML')
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"
@dp.message(lambda message: message.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
async def show_tasks(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT category, task, is_completed FROM tasks WHERE user_id = ?', (user_id,))
    tasks = cursor.fetchall()
    
    if tasks:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        tasks_by_category = {}
        for category, task, is_completed in tasks:
            if category not in tasks_by_category:
                tasks_by_category[category] = []
            tasks_by_category[category].append((task, is_completed))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìÇ –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
        for category, tasks_list in tasks_by_category.items():
            response += f"üìÅ <b>{category}</b>\n"
            for task, is_completed in tasks_list:
                status_emoji = "‚úÖ" if is_completed else "‚ùå"
                response += f"  ‚îî {status_emoji} {task}\n"
            response += "\n"
        
        await message.answer(response, parse_mode='HTML')
    else:
        await message.answer("–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.")

@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"Global error: {exception}")
    return True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
@dp.message(lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task(message: types.Message, state: FSMContext):
    await get_category(message, state, TaskStates.waiting_for_category_to_delete)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(TaskStates.waiting_for_category_to_delete)
async def process_category_to_delete(message: types.Message, state: FSMContext):
    await get_task(message, state, TaskStates.waiting_for_task_to_delete)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(TaskStates.waiting_for_task_to_delete)
async def process_task_number_to_delete(message: types.Message, state: FSMContext):
    try:
        if await state.get_state() != TaskStates.waiting_for_task_to_delete:
            await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
            await state.clear()
            return

        user_id = (await state.get_data()).get("user_id")
        task_number = int(message.text) - 1
        data = await state.get_data()
        category = data.get("category")
        task_list = data.get("task_list")
        
        if 0 <= task_number < len(task_list):
            task_id = task_list[task_number][0]
            cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
            conn.commit()
            await message.answer(f"üóë –ó–∞–¥–∞—á–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category}'</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", parse_mode='HTML')
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        
        await state.clear()  # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"
@dp.message(lambda message: message.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
async def clear_all_tasks(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('DELETE FROM tasks WHERE user_id = ?', (user_id,))
    conn.commit()
    await message.answer("üöÆ –í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏"
@dp.message(lambda message: message.text == "üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def change_task_category(message: types.Message, state: FSMContext):
    await get_category(message, state, TaskStates.waiting_for_category_to_change)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message(TaskStates.waiting_for_category_to_change)
async def process_category_to_change(message: types.Message, state: FSMContext):
    await get_task(message, state, TaskStates.waiting_for_task_to_change_category)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(TaskStates.waiting_for_task_to_change_category)
async def process_task_number_to_change_category(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    user_id = (await state.get_data()).get("user_id")
    try:
        task_number = int(message.text) - 1
        data = await state.get_data()
        category = data.get("category")
        task_list = data.get("task_list")
        if 0 <= task_number < len(task_list):
            task_id = task_list[task_number][0]
            cursor.execute('SELECT task FROM tasks WHERE id = ?', (task_id,))
            task_to_move = cursor.fetchone()[0]
            await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_to_move}':")
            await state.update_data(task_id=task_id, task_to_move=task_to_move, old_category=category)
            await state.set_state(TaskStates.waiting_for_new_category)
        else:
            logging.info(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: {task_number}. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    except ValueError:
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
@dp.message(TaskStates.waiting_for_new_category)
async def process_new_category(message: types.Message, state: FSMContext):
    user_id = (await state.get_data()).get("user_id")
    new_category = message.text.strip()
    data = await state.get_data()
    task_id = data.get("task_id")
    old_category = data.get("old_category")
    cursor.execute('UPDATE tasks SET category = ? WHERE id = ?', (new_category, task_id))
    conn.commit()
    await message.answer( f"üîÄ –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞:\n"
        f"‚ñ´Ô∏è –ò–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{old_category}'</b>\n"
        f"‚ñ´Ô∏è –í –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>'{new_category}'</b>",
        parse_mode='HTML')
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"
@dp.message(lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
async def show_completed_tasks(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT category, task FROM tasks WHERE user_id = ? AND is_completed = 1', (user_id,))
    completed_tasks = cursor.fetchall()
    if completed_tasks:
        response = "üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        for category, task in completed_tasks:
            response += f"‚ñ´Ô∏è <b>{category}</b>\n  ‚îî ‚úÖ {task}\n"
        await message.answer(response,
        parse_mode='HTML')
    else:
        await message.answer("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π"
@dp.message(lambda message: message.text == "‚úîÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def mark_task_complete_start(message: types.Message, state: FSMContext):
    await get_category(message, state, TaskStates.waiting_for_category_to_mark_complete)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(TaskStates.waiting_for_category_to_mark_complete)
async def process_category_to_mark_complete(message: types.Message, state: FSMContext):
    await get_task(message, state, TaskStates.waiting_for_task_to_mark_complete)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(TaskStates.waiting_for_task_to_mark_complete)
async def process_task_to_mark_complete(message: types.Message, state: FSMContext):
    user_id = (await state.get_data()).get("user_id")
    try:
        task_number = int(message.text) - 1
        data = await state.get_data()
        category = data.get("category")
        task_list = data.get("task_list")
        
        if 0 <= task_number < len(task_list):
            task_id = task_list[task_number][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            cursor.execute('SELECT task, is_completed FROM tasks WHERE id = ?', (task_id,))
            task_text, current_status = cursor.fetchone()
            
            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
            new_status = 1 if current_status == 0 else 0
            status_emoji = "‚úÖ" if new_status == 1 else "‚ùå"
            
            cursor.execute('UPDATE tasks SET is_completed = ? WHERE id = ?', 
                         (new_status, task_id))
            conn.commit()
            
            await message.answer(f"{status_emoji} –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
        f"‚ñ´Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n"
        f"‚ñ´Ô∏è –ó–∞–¥–∞—á–∞: <i>{task_text}</i>\n"
        f"‚ñ´Ô∏è –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if new_status else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}",
        parse_mode='HTML')
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        else:
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
            
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

@dp.message()
async def unhandled_message(message: types.Message):
    await message.answer(
        "‚ö†Ô∏è –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=create_keyboard([
            "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
            "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏",
            "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
        ])
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
